type UserId = principal;
type Result_2 = 
 variant {
   err: text;
   ok;
 };
type Result_1 = 
 variant {
   err: text;
   ok: MaterialListing;
 };
type Result = 
 variant {
   err: text;
   ok: Bid;
 };
type MaterialListing = 
 record {
   createdAt: int;
   id: nat;
   ipfsHash: opt text;
   location: text;
   materialType: text;
   owner: UserId;
   price: nat;
   quantity: nat;
   status: ListingStatus;
 };
type ListingStatus = 
 variant {
   active;
   cancelled;
   sold;
 };
type BidStatus = 
 variant {
   accepted;
   active;
   rejected;
 };
type Bid = 
 record {
   amount: nat;
   bidder: UserId;
   id: nat;
   listingId: nat;
   status: BidStatus;
   timestamp: int;
 };
service : {
  acceptBid: (nat, nat) -> (Result_2);
  createListing: (text, nat, text, nat, opt text) -> (Result_1);
  getAllListings: () -> (vec MaterialListing) query;
  getBid: (nat) -> (opt Bid) query;
  getListing: (nat) -> (opt MaterialListing) query;
  getListingBids: (nat) -> (vec Bid) query;
  placeBid: (nat, nat) -> (Result);
}
